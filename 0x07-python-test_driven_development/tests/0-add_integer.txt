The ``0-add_integer.py`` module
==================

Using ``add_integer``
-------------------

This test text file in for function add_integer. First import
``factorial`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

   >>> add_integer(3, )
   101

   >>> add_integer(8, 7)
   15

   >>> add_integer(-8, -7)
   -15

   >>> add_integer(0, )
   98

   >>> add_integer(-9, 7)
   -2

   >>> add_integer(0, 0)
   0

   >>> add_integer(7, 0)
   7

   >>> add_integer(9.1, 3)
   12

   >>> add_integer(-9.6, 4)
   -5

   >>> add_integer('m', 6)
   Traceback (most recent call last):
   TypeError: a must be an integer

   >>> add_integer('madez', 6)
   Traceback (most recent call last):
   TypeError: a must be an integer

   >>> add_integer(8, 'madez')
   Traceback (most recent call last):
   TypeError: b must be an integer

   >>> add_integer(8, 'm')
   Traceback (most recent call last):
   TypeError: b must be an integer

   >>> add_integer(None)
   Traceback (most recent call last):
   TypeError: a must be an integer

   >>> add_integer()
   Traceback (most recent call last):
   TypeError: add_integer() missing 1 required positional argument: 'a'

   >>> add_integer(float(2e3343), float(12e356))
   Traceback (most recent call last):
   OverflowError: cannot convert float infinity to integer

   >>> add_integer(float('nan'))
   Traceback (most recent call last):
   ValueError: cannot convert float NaN to integer
